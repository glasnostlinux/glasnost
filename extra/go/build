#!/bin/sh -e

get_arch(){
    case "$1" in
	aarch64)     echo "arm64" ;;
        aarch64_be)  echo "arm64" ;;
	armv7)       echo "arm" ;;
	i686)        echo "386" ;;
	x86_64)      echo "amd64" ;;
	powerpc64le) echo "ppc64le" ;;
	powerpc64)   echo "ppc64" ;;
        powerpcle)   echo "ppcle" ;;
        powerpc)     echo "ppc" ;;
        riscv64)     echo "riscv64" ;;
	*) echo "Unsupported architecture $1"; exit 1;;
    esac
}

# Disable stripping of binaries.
# This breaks Go.
:> nostrip

# If building on arm, i386 or amd64 we can bootstrap from c using
# the go 1.4 source. Other arch require a binary bootstrap.
if [ "$KISS_XBUILD_ARCH" = "x86_64" ] || [ "$KISS_XBUILD_ARCH" = "i686" ] || [ "$KISS_XBUILD_ARCH" = "armv7" ]; then
    echo "Building go bootstrap from source"

    export GOROOT=$PWD/go1.4-bootstrap
    export GOROOT_FINAL=$PWD/lib/go-bootstrap
    mkdir -p lib/go-bootstrap
    (
     cd "$GOROOT/src"
     CC=clang CFLAGS= LDFLAGS= ./make.bash
     cd ..
     cp -a bin pkg src ../lib/go-bootstrap
    )
    export GOROOT_BOOTSTRAP=$PWD/lib/go-bootstrap
else
    echo "Using binary go for bootstrap"
    export GOROOT_BOOTSTRAP="$PWD/$(get_arch $KISS_XBUILD_ARCH)-bootstrap"
fi

export CC="clang"
export CC_FOR_TARGET="$CC"
export GOHOSTOS=linux
export GOHOSTARCH="$(get_arch $KISS_XBUILD_ARCH)"
export GOOS=linux
export GOARCH="$(get_arch $KISS_XHOST_ARCH)"
export GO_LDFLAGS="-w -s"
export GOROOT_FINAL=/usr/lib/go
export GOROOT=$PWD/go-current

# Build go for the target
(
    cd "$GOROOT/src"
    ./make.bash --no-clean -v
)

cd "$GOROOT"

mkdir -p "$1/usr/bin" "$1/usr/lib/go/bin"

# Install main file
if [ "$KISS_XBUILD_TRIPLE" != "$KISS_XHOST_TRIPLE" ]; then
    install -m755 "bin/linux_$GOARCH/go"    "$1/usr/lib/go/bin/go"
    install -m755 "bin/linux_$GOARCH/gofmt" "$1/usr/lib/go/bin/gofmt"
else
    install -m755 "bin/go"    "$1/usr/lib/go/bin/go"
    install -m755 "bin/gofmt" "$1/usr/lib/go/bin/gofmt"
fi

# Create standard symlinks
ln -s "/usr/lib/go/bin/go"    "$1/usr/bin"
ln -s "/usr/lib/go/bin/gofmt" "$1/usr/bin"

cp -a misc pkg src lib "$1/usr/lib/go"

# Remove unneeded files.
rm -f  "$1/usr/share/go/doc/articles/wiki/get.bin"
rm -f  "$1/usr/lib/go/pkg/tool/"*/api
rm -rf "$1/usr/lib/go/pkg/bootstrap"
rm -rf "$1/usr/lib/go/pkg/obj"

# Remove tests.
for path in "$1/usr/lib/go/src" "$1/usr/lib/go/misc/cgo"
do
    find "$path" -type f -a -name \*_test.go -depth -exec rm {} +
    find "$path" -type f -a -name \*.bash    -depth -exec rm {} +
    find "$path" -type f -a -name \*.bat     -depth -exec rm {} +
    find "$path" -type f -a -name \*.rc      -depth -exec rm {} +
done


find . -type d -a -name testdata |
    while read -r dir; do
        rm -rf "$dir"
    done
