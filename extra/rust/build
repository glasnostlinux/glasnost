#!/bin/sh -e

unset CC
unset CXX
unset CFLAGS
unset LDFLAGS

patch -p1 < openssl.patch
patch -p1 < glasnost.patch

# std needs a musl root for each target
build_musl() {(
  cd musl
  mkdir -p $2
  export CC="clang --target=${1}"

  ./configure \
    --prefix="" \
    --syslibdir=/lib \
    --target=${1}

  make CROSS_COMPILE=""
  make CROSS_COMPILE="" DESTDIR="$2" install
  make clean
)}


# Define all supported archs:
archs="aarch64-unknown-linux-musl powerpc64-unknown-linux-musl powerpc64le-unknown-linux-musl x86_64-unknown-linux-musl"
archlist="$(echo $archs | sed 's/[^ ][^ ]*/\"&\",/g' | sed 's/,$/\ /')"

# Clear vendor checksums
sed -i 's/\("files":{\)[^}]*/\1/' \
    vendor/openssl-sys/.cargo-checksum.json \
    vendor/openssl-src/.cargo-checksum.json \
    vendor/libc/.cargo-checksum.json

# Bootstrap correct version
cp -f stage0.json src/

build="$KISS_XBUILD_ARCH-unknown-linux-$KISS_XBUILD_ABI"
target="$KISS_XHOST_ARCH-unknown-linux-$KISS_XHOST_ABI"


# This package mimics the download process of rust's 'x.py'
# bootstrap library to allow for the removal of the internet
# connection requirement per build.
{
    cache_dir="build/cache/2022-02-24"
    mkdir -p $cache_dir

    for tarball in *.tar.xz\?no-extract; do
        mv -f "$tarball" "$cache_dir/${tarball%%\?no-extract}"
    done
}

cat > config.toml <<EOF
[llvm]
link-shared     = false
skip-rebuild    = true

[build]
build           =   "$build"
host            = [ "$target" ]
target          = [ $archlist ]
docs            = false
compiler-docs   = false
extended        = true
submodules      = false
python          = "python3"
locked-deps     = true
vendor          = true
sanitizers      = false
profiler        = false
tools           = ["cargo"]
cargo-native-static = true
full-bootstrap  = false

[install]
prefix = "/usr"

[rust]
channel           = "stable"
rpath             = true
codegen-units     = 0
codegen-units-std = 1
backtrace         = true
jemalloc          = false
codegen-tests     = false
llvm-libunwind    = "in-tree"
debug             = false
debuginfo-level   = 0
optimize          = true
use-lld           = true
llvm-tools        = true
dist-src          = false

EOF

# Set up roots and compilers for each arch
mkdir -p roots
roots="$(realpath roots)"
for arch in $archs
do
    # Add arch to config.toml
    cat >> config.toml <<EOF

[target.$arch]
llvm-config = "/usr/bin/llvm-config"
crt-static  = false
cc          = "clang"
cxx         = "clang++"
linker      = "clang"
sanitizers  = false
EOF

    # If $arch is the target arch, root is $KISS_ROOT
    # If $arch is the build arch, root is /
    # Build a musl root otherwise.
    case $arch in
        $target)                                 envs="$envs LIBDIR_$arch=$KISS_ROOT/usr/lib"; echo "sysroot = \"${KISS_ROOT:-/}\"" >> config.toml;;
        $build)                                  envs="$envs LIBDIR_$arch=/usr/lib";           echo "sysroot = \"/\""               >> config.toml;;
        *)      build_musl $arch "$roots/$arch"; envs="$envs LIBDIR_$arch=$roots/$arch/lib";   echo "sysroot = \"$roots/$arch\""    >> config.toml;;
    esac

done

# Do the build
env \
$envs \
CFLAGS="-Wno-unused-command-line-argument -Wno-shift-op-parentheses" \
CXXFLAGS="-Wno-shift-op-parentheses" \
LDFLAGS="" \
RUSTFLAGS="" \
DESTDIR="$1" \
python3 ./x.py -j "$(nproc)" install

rm -rf "$1/usr/lib/rustlib/src/"
rm -f  "$1/usr/lib/rustlib/uninstall.sh"
