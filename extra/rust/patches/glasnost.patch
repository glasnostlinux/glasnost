diff --git a/compiler/rustc_llvm/build.rs b/compiler/rustc_llvm/build.rs
index 3b6808d69..475df2ba8 100644
--- a/compiler/rustc_llvm/build.rs
+++ b/compiler/rustc_llvm/build.rs
@@ -229,11 +229,9 @@ fn main() {
     cmd.arg(llvm_link_arg).arg("--ldflags");
     for lib in output(&mut cmd).split_whitespace() {
         if is_crossed {
-            if let Some(stripped) = lib.strip_prefix("-LIBPATH:") {
-                println!("cargo:rustc-link-search=native={}", stripped.replace(&host, &target));
-            } else if let Some(stripped) = lib.strip_prefix("-L") {
-                println!("cargo:rustc-link-search=native={}", stripped.replace(&host, &target));
-            }
+            let libdir_env_var_name = format!("LIBDIR_{}", &target.as_str());
+            let libdir_loc = env::var(libdir_env_var_name).unwrap();
+            println!("cargo:rustc-link-search=native={}", libdir_loc);
         } else if let Some(stripped) = lib.strip_prefix("-LIBPATH:") {
             println!("cargo:rustc-link-search=native={}", stripped);
         } else if let Some(stripped) = lib.strip_prefix("-l") {
diff --git a/compiler/rustc_llvm/src/lib.rs b/compiler/rustc_llvm/src/lib.rs
index 8476c2bfc..d308dfe6e 100644
--- a/compiler/rustc_llvm/src/lib.rs
+++ b/compiler/rustc_llvm/src/lib.rs
@@ -188,3 +188,12 @@ pub fn initialize_available_targets() {
         LLVMInitializeBPFAsmParser
     );
 }
+
+#[link(name = "c++abi", kind = "static")]
+extern {}
+#[link(name = "c++", kind = "static")]
+extern {}
+#[link(name = "z", kind = "static")]
+extern {}
+#[link(name = "unwind", kind = "static")]
+extern {}
diff --git a/compiler/rustc_target/src/spec/linux_musl_base.rs b/compiler/rustc_target/src/spec/linux_musl_base.rs
index 5038a967d..96560bddc 100644
--- a/compiler/rustc_target/src/spec/linux_musl_base.rs
+++ b/compiler/rustc_target/src/spec/linux_musl_base.rs
@@ -10,7 +10,7 @@ pub fn opts() -> TargetOptions {
     base.crt_objects_fallback = Some(CrtObjectsFallback::Musl);
 
     // These targets statically link libc by default
-    base.crt_static_default = true;
+    base.crt_static_default = false;
 
     base
 }
diff --git a/src/bootstrap/builder.rs b/src/bootstrap/builder.rs
index 0d387ff1e..4ad78a45b 100644
--- a/src/bootstrap/builder.rs
+++ b/src/bootstrap/builder.rs
@@ -1286,6 +1286,11 @@ impl<'a> Builder<'a> {
             }
         }
 
+        if let Some(sysroot) = self.native_sysroot(target) {
+            rustflags.arg(&format!("-Clink-args=--sysroot={}", sysroot.display()));
+            rustflags.arg(&format!("-Clink-args=-lunwind"));
+        }
+
         if let Some(host_linker) = self.linker(compiler.host) {
             cargo.env("RUSTC_HOST_LINKER", host_linker);
         }
@@ -1300,6 +1305,18 @@ impl<'a> Builder<'a> {
         }
         if self.is_fuse_ld_lld(target) {
             rustflags.arg("-Clink-args=-fuse-ld=lld");
+            //JD
+            let arch = target.to_string().chars().take( target.to_string().find('-').unwrap()  ).collect::<String>();
+
+            if arch == "riscv64gc" {
+                rustflags.arg(&format!("-Clink-args=/usr/lib/clang/system/lib/linux/libclang_rt.builtins-{}.a", "riscv64"));
+                rustflags.arg(&format!("-Clink-args=--target={}", "riscv64-linux-musl"));
+            }
+            else {
+                rustflags.arg(&format!("-Clink-args=/usr/lib/clang/system/lib/linux/libclang_rt.builtins-{}.a", arch));
+                rustflags.arg(&format!("-Clink-args=--target={}", target));
+            }
+            rustflags.arg("-Clink-args=-fno-lto");
         }
         self.lld_flags(target).for_each(|flag| {
             rustdocflags.arg(&flag);
diff --git a/src/bootstrap/cc_detect.rs b/src/bootstrap/cc_detect.rs
index 8c47f625d..d5e1a63ec 100644
--- a/src/bootstrap/cc_detect.rs
+++ b/src/bootstrap/cc_detect.rs
@@ -158,7 +158,7 @@ fn set_compiler(
     compiler: Language,
     target: TargetSelection,
     config: Option<&Target>,
-    build: &Build,
+    _build: &Build,
 ) {
     match &*target.triple {
         // When compiling for android we may have the NDK configured in the
@@ -212,15 +212,6 @@ fn set_compiler(
             }
         }
 
-        t if t.contains("musl") => {
-            if let Some(root) = build.musl_root(target) {
-                let guess = root.join("bin/musl-gcc");
-                if guess.exists() {
-                    cfg.compiler(guess);
-                }
-            }
-        }
-
         _ => {}
     }
 }
diff --git a/src/bootstrap/compile.rs b/src/bootstrap/compile.rs
index f05d1dcf4..14b23fe03 100644
--- a/src/bootstrap/compile.rs
+++ b/src/bootstrap/compile.rs
@@ -206,14 +206,15 @@ fn copy_self_contained_objects(
     // To do that we have to distribute musl startup objects as a part of Rust toolchain
     // and link with them manually in the self-contained mode.
     if target.contains("musl") {
-        let srcdir = builder.musl_libdir(target).unwrap_or_else(|| {
-            panic!("Target {:?} does not have a \"musl-libdir\" key", target.triple)
+        let srcdir = builder.native_sysroot(target).unwrap_or_else(|| {
+            panic!("Target {:?} does not have a \"sysroot\" key", target.triple)
         });
         for &obj in &["libc.a", "crt1.o", "Scrt1.o", "rcrt1.o", "crti.o", "crtn.o"] {
+//JD
             copy_and_stamp(
                 builder,
                 &libdir_self_contained,
-                &srcdir,
+                &srcdir.join("/usr/lib"),
                 obj,
                 &mut target_deps,
                 DependencyType::TargetSelfContained,
@@ -318,7 +319,8 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car
         // Help the libc crate compile by assisting it in finding various
         // sysroot native libraries.
         if target.contains("musl") {
-            if let Some(p) = builder.musl_libdir(target) {
+//JD
+            if let Some(p) = builder.native_sysroot(target) {
                 let root = format!("native={}", p.to_str().unwrap());
                 cargo.rustflag("-L").rustflag(&root);
             }
diff --git a/src/bootstrap/config.rs b/src/bootstrap/config.rs
index d6f77fe6c..e0797a8d2 100644
--- a/src/bootstrap/config.rs
+++ b/src/bootstrap/config.rs
@@ -174,7 +174,6 @@ pub struct Config {
     pub missing_tools: bool,
 
     // Fallback musl-root for all targets
-    pub musl_root: Option<PathBuf>,
     pub prefix: Option<PathBuf>,
     pub sysconfdir: Option<PathBuf>,
     pub datadir: Option<PathBuf>,
@@ -297,12 +296,11 @@ pub struct Target {
     pub ranlib: Option<PathBuf>,
     pub default_linker: Option<PathBuf>,
     pub linker: Option<PathBuf>,
+    pub sysroot: Option<PathBuf>,
     pub ndk: Option<PathBuf>,
     pub sanitizers: Option<bool>,
     pub profiler: Option<bool>,
     pub crt_static: Option<bool>,
-    pub musl_root: Option<PathBuf>,
-    pub musl_libdir: Option<PathBuf>,
     pub wasi_root: Option<PathBuf>,
     pub qemu_rootfs: Option<PathBuf>,
     pub no_std: bool,
@@ -534,7 +532,6 @@ derive_merge! {
         default_linker: Option<String>,
         channel: Option<String>,
         description: Option<String>,
-        musl_root: Option<String>,
         rpath: Option<bool>,
         verbose_tests: Option<bool>,
         optimize_tests: Option<bool>,
@@ -574,14 +571,13 @@ derive_merge! {
         ranlib: Option<String>,
         default_linker: Option<PathBuf>,
         linker: Option<String>,
+        sysroot: Option<String>,
         llvm_config: Option<String>,
         llvm_filecheck: Option<String>,
         android_ndk: Option<String>,
         sanitizers: Option<bool>,
         profiler: Option<bool>,
         crt_static: Option<bool>,
-        musl_root: Option<String>,
-        musl_libdir: Option<String>,
         wasi_root: Option<String>,
         qemu_rootfs: Option<String>,
         no_std: Option<bool>,
@@ -943,7 +939,6 @@ impl Config {
             set(&mut config.llvm_tools_enabled, rust.llvm_tools);
             config.rustc_parallel = rust.parallel_compiler.unwrap_or(false);
             config.rustc_default_linker = rust.default_linker;
-            config.musl_root = rust.musl_root.map(PathBuf::from);
             config.save_toolstates = rust.save_toolstates.map(PathBuf::from);
             set(&mut config.deny_warnings, flags.deny_warnings.or(rust.deny_warnings));
             set(&mut config.backtrace_on_ice, rust.backtrace_on_ice);
@@ -988,9 +983,8 @@ impl Config {
                 target.ar = cfg.ar.map(PathBuf::from);
                 target.ranlib = cfg.ranlib.map(PathBuf::from);
                 target.linker = cfg.linker.map(PathBuf::from);
+                target.sysroot = cfg.sysroot.map(PathBuf::from);
                 target.crt_static = cfg.crt_static;
-                target.musl_root = cfg.musl_root.map(PathBuf::from);
-                target.musl_libdir = cfg.musl_libdir.map(PathBuf::from);
                 target.wasi_root = cfg.wasi_root.map(PathBuf::from);
                 target.qemu_rootfs = cfg.qemu_rootfs.map(PathBuf::from);
                 target.sanitizers = cfg.sanitizers;
diff --git a/src/bootstrap/lib.rs b/src/bootstrap/lib.rs
index 3130dcc27..f2d502467 100644
--- a/src/bootstrap/lib.rs
+++ b/src/bootstrap/lib.rs
@@ -1059,23 +1059,8 @@ impl Build {
         }
     }
 
-    /// Returns the "musl root" for this `target`, if defined
-    fn musl_root(&self, target: TargetSelection) -> Option<&Path> {
-        self.config
-            .target_config
-            .get(&target)
-            .and_then(|t| t.musl_root.as_ref())
-            .or_else(|| self.config.musl_root.as_ref())
-            .map(|p| &**p)
-    }
-
-    /// Returns the "musl libdir" for this `target`.
-    fn musl_libdir(&self, target: TargetSelection) -> Option<PathBuf> {
-        let t = self.config.target_config.get(&target)?;
-        if let libdir @ Some(_) = &t.musl_libdir {
-            return libdir.clone();
-        }
-        self.musl_root(target).map(|root| root.join("lib"))
+    fn native_sysroot(&self, target: TargetSelection) -> Option<&Path> {
+        self.config.target_config.get(&target).and_then(|c| c.sysroot.as_ref()).map(|p| &**p)
     }
 
     /// Returns the sysroot for the wasi target, if defined
diff --git a/src/bootstrap/sanity.rs b/src/bootstrap/sanity.rs
index d7db2cef2..a79117795 100644
--- a/src/bootstrap/sanity.rs
+++ b/src/bootstrap/sanity.rs
@@ -11,7 +11,6 @@
 use std::collections::HashMap;
 use std::env;
 use std::ffi::{OsStr, OsString};
-use std::fs;
 use std::path::PathBuf;
 use std::process::Command;
 
@@ -178,28 +177,6 @@ pub fn check(build: &mut Build) {
             }
         }
 
-        // Make sure musl-root is valid
-        if target.contains("musl") {
-            // If this is a native target (host is also musl) and no musl-root is given,
-            // fall back to the system toolchain in /usr before giving up
-            if build.musl_root(*target).is_none() && build.config.build == *target {
-                let target = build.config.target_config.entry(*target).or_default();
-                target.musl_root = Some("/usr".into());
-            }
-            match build.musl_libdir(*target) {
-                Some(libdir) => {
-                    if fs::metadata(libdir.join("libc.a")).is_err() {
-                        panic!("couldn't find libc.a in musl libdir: {}", libdir.display());
-                    }
-                }
-                None => panic!(
-                    "when targeting MUSL either the rust.musl-root \
-                            option or the target.$TARGET.musl-root option must \
-                            be specified in config.toml"
-                ),
-            }
-        }
-
         if need_cmake && target.contains("msvc") {
             // There are three builds of cmake on windows: MSVC, MinGW, and
             // Cygwin. The Cygwin build does not have generators for Visual
