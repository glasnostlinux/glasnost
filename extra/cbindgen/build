#!/bin/sh -e

# Set the CARGO_HOME variable to the current directory to prevent cargo from
# touching '$HOME/.cargo'. This keeps the build contained to the package
# manager's domain.
export CARGO_HOME=$PWD

# Instruct the compiler to trim absolute paths in resulting binaries and instead
# change them to relative paths ($PWD/... ./...).
export RUSTFLAGS="$RUSTFLAGS --remap-path-prefix=$PWD=."

# Extract each crate and generate a checksum file. This effectively mimics
# 'cargo vendor' without the network requirement. This allows the package
# manager to cache each crate and handle them as regular sources.
(
    cd vendor

    # Download link for this crate 404s. Mirror link saves the file as
    # 'download' so it must be renamed.
    mv -f download wasi-0.9.0+wasi-snapshot-preview1.crate

    for crate in *.crate; do
        tar xf "$crate"

        # Strip the filename from the sha256sum output.
        sha256=$(sha256sum "$crate")
        sha256=${sha256%% *}

        printf '{"package":"%s","files":{}}\n' "$sha256" \
            > "${crate%.crate}/.cargo-checksum.json"
    done
)

TARGET="$KISS_XHOST_ARCH-unknown-linux-$KISS_XHOST_ABI"

# Create an executable which will be our linker
echo "#!/bin/sh" > cc-linker
echo "${CC:-clang} \$@"  >> cc-linker
chmod a+x cc-linker

# Cargo reads a "global" configuration file from $CARGO_HOME, as we've set it to
# $PWD this is where we'll be storing the vendor config.
mkdir -p .cargo

# Create the configuration file to tell cargo to look in the 'vendor' directory
# for the already downloaded sources rather than crates.io (over network).
cat <<EOF > .cargo/config
[source.crates-io]
replace-with = "vendored-sources"
[source.vendored-sources]
directory = "vendor"
[target.$TARGET]
linker = "$(realpath cc-linker)"
EOF


# Use the '--frozen' flag to tell cargo to skip the network
# and use whatever dependencies are in the Cargo.[toml|lock]
# files.
cargo build \
    --release \
    --frozen \
    --target=$TARGET

install -Dm755 target/$TARGET/release/cbindgen "$1/usr/bin/cbindgen"
