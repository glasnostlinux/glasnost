#!/bin/sh -e

(
    cd libcxx
    patch -p1 < ../libcxx-musl.patch
)

#
sed -i 's/!defined(_GCC_MAX_ALIGN_T)/& \&\& !defined(__DEFINED_max_align_t)/' libcxx/include/stddef.h
sed -i 's/set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE)/set(COMPILER_RT_HAS_SANITIZER_COMMON FALSE)/' compiler-rt/cmake/config-ix.cmake

# Do not link to libexecinfo if it is present
sed -i 's/set(HAVE_BACKTRACE ${Backtrace_FOUND})/set(HAVE_BACKTRACE 0)/g' llvm/cmake/config-ix.cmake

export DESTDIR="$1"

case $(cc -dumpmachine) in
   aarch64-glasnost-linux-musl) export BUILDTARGETS="AArch64;ARM" ARCH="aarch64";;
   x86_64-glasnost-linux-musl) export BUILDTARGETS="X86;AMDGPU" ARCH="x86_64";;
   powerpc64le-glasnost-linux-musl) export BUILDTARGETS="PowerPC;AMDGPU" ARCH="powerpc64le";;
   powerpc64-glasnost-linux-musl) export BUILDTARGETS="PowerPC;AMDGPU" ARCH="powerpc64";;
   *) echo "Unsupported platform: $(cc -dumpmachine)"; exit 1;;
esac

echo "Building targets: $ARCH, $BUILDTARGETS"

cmake -B build \
    -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
    -DCLANG_DEFAULT_RTLIB=compiler-rt \
    -DCLANG_DEFAULT_UNWINDLIB=libunwind \
    -DCLANG_VENDOR="glasnost" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_CXX_COMPILER=clang++ \
    -DCMAKE_C_COMPILER=clang \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCOMPILER_RT_BUILD_CRT=ON \
    -DCOMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=OFF \
    -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
    -DCXX_SUPPORTS_CUSTOM_LINKER=ON \
    -DLIBCXXABI_USE_COMPILER_RT=ON \
    -DLIBCXXABI_USE_LLVM_UNWINDER=ON \
    -DLIBCXX_CXX_ABI=libcxxabi \
    -DLIBCXX_HAS_MUSL_LIBC=ON \
    -DLIBCXX_USE_COMPILER_RT=ON \
    -DLIBUNWIND_SUPPORTS_FNO_EXCEPTIONS_FLAG=ON \
    -DLIBUNWIND_SUPPORTS_FNO_RTTI_FLAG=ON \
    -DLIBUNWIND_SUPPORTS_NODEFAULTLIBS_FLAG=ON \
    -DLIBUNWIND_USE_COMPILER_RT=ON \
    -DLLVM_BUILD_DOCS=OFF \
    -DLLVM_BUILD_EXAMPLES=OFF \
    -DLLVM_BUILD_LLVM_DYLIB=ON \
    -DLLVM_BUILD_TESTS=OFF \
    -DLLVM_ENABLE_EH=ON \
    -DLLVM_ENABLE_LIBCXX=ON \
    -DLLVM_ENABLE_LIBEDIT=OFF \
    -DLLVM_ENABLE_LIBXML2=OFF \
    -DLLVM_ENABLE_LLD=ON \
    -DLLVM_ENABLE_LTO=OFF \
    -DLLVM_ENABLE_PROJECTS="clang;compiler-rt;libunwind;libcxxabi;libcxx;lld" \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_ENABLE_TERMINFO=OFF \
    -DLLVM_HOST_TRIPLE="$ARCH-glasnost-linux-musl" \
    -DLLVM_INSTALL_BINUTILS_SYMLINKS=ON \
    -DLLVM_INSTALL_UTILS=ON \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DLLVM_TARGETS_TO_BUILD="$BUILDTARGETS" \
    -Wno-dev llvm

cmake --build build
cmake --install build

# libc++abi header files
mkdir -p "$1/usr"
cp -r libcxxabi/include "$1/usr"

# LLD: Replace GNU binutils
ln -s ld.lld "$1/usr/bin/ld"

# Clang: Some legacy programs may require cc
ln -s clang "$1/usr/bin/cc"

# Clang: equivalent for c++
ln -s clang++ "$1/usr/bin/c++"

# Clang: equivalent for cpp
ln -s clang-cpp "$1/usr/bin/cpp"

# Clang: POSIX compliance
install -m755 c99 "$1/usr/bin/c99"

# For GCC compatibility
cd $1/usr/bin/
ln -s -f llvm-ranlib  ranlib
ln -s -f llvm-readobj readelf
ln -s -f llvm-strip   strip
ln -s -f llvm-nm      nm
ln -s -f llvm-objcopy objcopy
ln -s -f llvm-objdump objdump
ln -s -f llvm-strings strings

# link to clang_rt.crtbegin* etc?
touch $1/usr/lib/crtbeginS.o
touch $1/usr/lib/crtbeginT.o
touch $1/usr/lib/crtendS.o
touch $1/usr/lib/crtend.o
