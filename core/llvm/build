#!/bin/sh -e

patch -p1 < libcxx-musl.patch
patch -p1 < llvm-006-aarch64-mf_exec.patch
patch -p1 < crt.patch

# Disable sanitizer
sed -i 's/!defined(_GCC_MAX_ALIGN_T)/& \&\& !defined(__DEFINED_max_align_t)/' libcxx/include/stddef.h
sed -i 's/set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE)/set(COMPILER_RT_HAS_SANITIZER_COMMON FALSE)/' compiler-rt/cmake/config-ix.cmake

# Do not link to libexecinfo if it is present
sed -i 's/set(HAVE_BACKTRACE ${Backtrace_FOUND})/set(HAVE_BACKTRACE 0)/g' llvm/cmake/config-ix.cmake

# Prevent linking to ncurses if it is present
sed -i "s/LLVM_ENABLE_TERMINFO 1/LLVM_ENABLE_TERMINFO 0/g" llvm/cmake/config-ix.cmake

# Determine llvm version installed in root
export CLANGVER=$(cat $KISS_ROOT/var/db/kiss/installed/llvm/version | cut -d " " -f 1)

# Determine targets for architecture
case $KISS_XHOST_ARCH in
   aarch64)      TARGET_ARCH="AArch64" libname="aarch64";;
   armv7)        TARGET_ARCH="ARMv7"   libname="armhf"  EXTRAFLAGS="-L$KISS_ROOT/usr/lib/clang/$CLANGVER/lib/linux -lclang_rt.builtins-armhf -Wno-unused-command-line-argument";;
   x86_64)       TARGET_ARCH="X86"     libname="x86_64";;
   powerpc64le*) TARGET_ARCH="PowerPC" libname="powerpc64le";;
   powerpc64*)   TARGET_ARCH="PowerPC" libname="powerpc64";;
   riscv64*)     TARGET_ARCH="RISCV64" libname="riscv64";;
   i386*)        TARGET_ARCH="X86"     libname="i386" EXTRAFLAGS="-L$KISS_ROOT/usr/lib/clang/$CLANGVER/lib/linux -lclang_rt.builtins-i386 -Wno-unused-command-line-argument";;
   *) echo "Unsupported platform: $KISS_XHOST_ARCH"; exit 1;;
esac

export DESTDIR="$1"

kiss-cmake-config > toolchain.cmake

cmake -G "Ninja" \
    -B build \
    -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
    -DCLANG_DEFAULT_RTLIB=compiler-rt \
    -DCLANG_DEFAULT_UNWINDLIB=libunwind \
    -DCLANG_VENDOR="glasnost"\
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_CXX_COMPILER=clang++ \
    -DCMAKE_ASM_FLAGS="$CFLAGS " \
    -DCMAKE_C_COMPILER=clang \
    -DCMAKE_C_FLAGS="$CFLAGS $EXTRAFLAGS" \
    -DCMAKE_CXX_FLAGS="$CXXFLAGS $EXTRAFLAGS" \
    -DCOMPILER_RT_BUILD_CRT=ON \
    -DCOMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=OFF \
    -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
    -DCXX_SUPPORTS_CUSTOM_LINKER=ON \
    -DLIBCXXABI_USE_COMPILER_RT=ON \
    -DLIBCXXABI_USE_LLVM_UNWINDER=ON \
    -DLIBCXX_CXX_ABI=libcxxabi \
    -DLIBCXX_HAS_MUSL_LIBC=ON \
    -DLIBCXX_USE_COMPILER_RT=ON \
    -DLIBUNWIND_SUPPORTS_FNO_EXCEPTIONS_FLAG=ON \
    -DLIBUNWIND_SUPPORTS_FNO_RTTI_FLAG=ON \
    -DLIBUNWIND_SUPPORTS_NODEFAULTLIBS_FLAG=ON \
    -DLIBUNWIND_USE_COMPILER_RT=ON \
    -DLIBUNWIND_ENABLE_CROSS_UNWINDING=ON \
    -DLIBUNWIND_SYSROOT="${KISS_ROOT:-/}" \
    -DLIBUNWIND_TARGET_TRIPLE="$KISS_XHOST_TRIPLE" \
    -DLLVM_BUILD_DOCS=OFF \
    -DLLVM_BUILD_EXAMPLES=OFF \
    -DLLVM_BUILD_LLVM_DYLIB=ON \
    -DLLVM_BUILD_TESTS=OFF \
    -DLLVM_ENABLE_EH=ON \
    -DLLVM_ENABLE_LIBCXX=ON \
    -DLLVM_ENABLE_LIBEDIT=OFF \
    -DLLVM_ENABLE_LIBXML2=OFF \
    -DLLVM_ENABLE_LLD=ON \
    -DLLVM_ENABLE_LTO=OFF \
    -DLLVM_ENABLE_PROJECTS="clang;compiler-rt;libunwind;libcxxabi;libcxx;lld;clang-tools-extra" \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_ENABLE_TERMINFO=0 \
    -DLLVM_HOST_TRIPLE="$KISS_XHOST_TRIPLE" \
    -DLLVM_INSTALL_BINUTILS_SYMLINKS=ON \
    -DLLVM_INSTALL_CCTOOLS_SYMLINKS=ON \
    -DLLVM_INSTALL_UTILS=ON \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DLLVM_TARGETS_TO_BUILD="ARM;AArch64;AMDGPU;PowerPC;RISCV;X86" \
    -DLLVM_TARGET_ARCH="$TARGET_ARCH" \
    -DLLVM_TABLEGEN="/usr/bin/llvm-tblgen" \
    -DCLANG_TABLEGEN="/usr/bin/clang-tblgen" \
    -DCMAKE_TOOLCHAIN_FILE="$(realpath toolchain.cmake)" \
    -Wno-dev llvm

ninja -C build
ninja -C build install

# libc++abi header files
mkdir -p "$1/usr"
cp -r libcxxabi/include "$1/usr"

# LLD: Replace GNU binutils
ln -s ld.lld "$1/usr/bin/ld"

# Clang: Some legacy programs may require cc
ln -s clang "$1/usr/bin/cc"

# Clang: equivalent for c++
ln -s clang++ "$1/usr/bin/c++"

# Clang: equivalent for cpp
ln -s clang-cpp "$1/usr/bin/cpp"

# Clang: POSIX compliance
install -m755 c99 "$1/usr/bin/c99"

# Clang: clang-tblgen, required for crossbuilding.
install -Dm755 build/bin/clang-tblgen "$1/usr/bin/clang-tblgen"

# For GCC compatibility
cd $1/usr/bin/
ln -s -f llvm-ranlib  ranlib
ln -s -f llvm-readobj readelf
ln -s -f llvm-strip   strip
ln -s -f llvm-nm      nm
ln -s -f llvm-objcopy objcopy
ln -s -f llvm-objdump objdump
ln -s -f llvm-strings strings
ln -s -f llvm-objcopy otool

# symlinks to crtbegin/crtend files
# Mainly done for Rust.
cd $1/usr/lib/clang/12.0.0/lib/linux
install -Dm755 clang_rt.crtbegin-$libname.o $1/usr/lib/crtbegin.o
install -Dm755 clang_rt.crtend-$libname.o   $1/usr/lib/crtend.o
